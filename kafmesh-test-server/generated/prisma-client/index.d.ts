// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  data: (where?: DataWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  data: (where: DataWhereUniqueInput) => DataNullablePromise;
  datas: (args?: {
    where?: DataWhereInput;
    orderBy?: DataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Data>;
  datasConnection: (args?: {
    where?: DataWhereInput;
    orderBy?: DataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DataConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createData: (data: DataCreateInput) => DataPromise;
  updateData: (args: {
    data: DataUpdateInput;
    where: DataWhereUniqueInput;
  }) => DataPromise;
  updateManyDatas: (args: {
    data: DataUpdateManyMutationInput;
    where?: DataWhereInput;
  }) => BatchPayloadPromise;
  upsertData: (args: {
    where: DataWhereUniqueInput;
    create: DataCreateInput;
    update: DataUpdateInput;
  }) => DataPromise;
  deleteData: (where: DataWhereUniqueInput) => DataPromise;
  deleteManyDatas: (where?: DataWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  data: (
    where?: DataSubscriptionWhereInput
  ) => DataSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "parent_ASC"
  | "parent_DESC"
  | "description_ASC"
  | "description_DESC"
  | "shape_ASC"
  | "shape_DESC"
  | "source_ASC"
  | "source_DESC"
  | "target_ASC"
  | "target_DESC"
  | "label_ASC"
  | "label_DESC";

export type Shape = "TRIANGLE" | "ELLIPSES" | "RECTANGLE";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DataCreateInput {
  id?: Maybe<ID_Input>;
  name?: Maybe<String>;
  parent?: Maybe<String>;
  description?: Maybe<String>;
  shape?: Maybe<Shape>;
  source?: Maybe<String>;
  target?: Maybe<String>;
  label?: Maybe<String>;
}

export interface DataUpdateInput {
  name?: Maybe<String>;
  parent?: Maybe<String>;
  description?: Maybe<String>;
  shape?: Maybe<Shape>;
  source?: Maybe<String>;
  target?: Maybe<String>;
  label?: Maybe<String>;
}

export interface DataUpdateManyMutationInput {
  name?: Maybe<String>;
  parent?: Maybe<String>;
  description?: Maybe<String>;
  shape?: Maybe<Shape>;
  source?: Maybe<String>;
  target?: Maybe<String>;
  label?: Maybe<String>;
}

export interface DataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  parent?: Maybe<String>;
  parent_not?: Maybe<String>;
  parent_in?: Maybe<String[] | String>;
  parent_not_in?: Maybe<String[] | String>;
  parent_lt?: Maybe<String>;
  parent_lte?: Maybe<String>;
  parent_gt?: Maybe<String>;
  parent_gte?: Maybe<String>;
  parent_contains?: Maybe<String>;
  parent_not_contains?: Maybe<String>;
  parent_starts_with?: Maybe<String>;
  parent_not_starts_with?: Maybe<String>;
  parent_ends_with?: Maybe<String>;
  parent_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  shape?: Maybe<Shape>;
  shape_not?: Maybe<Shape>;
  shape_in?: Maybe<Shape[] | Shape>;
  shape_not_in?: Maybe<Shape[] | Shape>;
  source?: Maybe<String>;
  source_not?: Maybe<String>;
  source_in?: Maybe<String[] | String>;
  source_not_in?: Maybe<String[] | String>;
  source_lt?: Maybe<String>;
  source_lte?: Maybe<String>;
  source_gt?: Maybe<String>;
  source_gte?: Maybe<String>;
  source_contains?: Maybe<String>;
  source_not_contains?: Maybe<String>;
  source_starts_with?: Maybe<String>;
  source_not_starts_with?: Maybe<String>;
  source_ends_with?: Maybe<String>;
  source_not_ends_with?: Maybe<String>;
  target?: Maybe<String>;
  target_not?: Maybe<String>;
  target_in?: Maybe<String[] | String>;
  target_not_in?: Maybe<String[] | String>;
  target_lt?: Maybe<String>;
  target_lte?: Maybe<String>;
  target_gt?: Maybe<String>;
  target_gte?: Maybe<String>;
  target_contains?: Maybe<String>;
  target_not_contains?: Maybe<String>;
  target_starts_with?: Maybe<String>;
  target_not_starts_with?: Maybe<String>;
  target_ends_with?: Maybe<String>;
  target_not_ends_with?: Maybe<String>;
  label?: Maybe<String>;
  label_not?: Maybe<String>;
  label_in?: Maybe<String[] | String>;
  label_not_in?: Maybe<String[] | String>;
  label_lt?: Maybe<String>;
  label_lte?: Maybe<String>;
  label_gt?: Maybe<String>;
  label_gte?: Maybe<String>;
  label_contains?: Maybe<String>;
  label_not_contains?: Maybe<String>;
  label_starts_with?: Maybe<String>;
  label_not_starts_with?: Maybe<String>;
  label_ends_with?: Maybe<String>;
  label_not_ends_with?: Maybe<String>;
  AND?: Maybe<DataWhereInput[] | DataWhereInput>;
  OR?: Maybe<DataWhereInput[] | DataWhereInput>;
  NOT?: Maybe<DataWhereInput[] | DataWhereInput>;
}

export interface DataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DataWhereInput>;
  AND?: Maybe<DataSubscriptionWhereInput[] | DataSubscriptionWhereInput>;
  OR?: Maybe<DataSubscriptionWhereInput[] | DataSubscriptionWhereInput>;
  NOT?: Maybe<DataSubscriptionWhereInput[] | DataSubscriptionWhereInput>;
}

export type DataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface DataEdge {
  node: Data;
  cursor: String;
}

export interface DataEdgePromise extends Promise<DataEdge>, Fragmentable {
  node: <T = DataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DataEdgeSubscription
  extends Promise<AsyncIterator<DataEdge>>,
    Fragmentable {
  node: <T = DataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface DataPreviousValues {
  id: ID_Output;
  name?: String;
  parent?: String;
  description?: String;
  shape?: Shape;
  source?: String;
  target?: String;
  label?: String;
}

export interface DataPreviousValuesPromise
  extends Promise<DataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  parent: () => Promise<String>;
  description: () => Promise<String>;
  shape: () => Promise<Shape>;
  source: () => Promise<String>;
  target: () => Promise<String>;
  label: () => Promise<String>;
}

export interface DataPreviousValuesSubscription
  extends Promise<AsyncIterator<DataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  shape: () => Promise<AsyncIterator<Shape>>;
  source: () => Promise<AsyncIterator<String>>;
  target: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface DataSubscriptionPayload {
  mutation: MutationType;
  node: Data;
  updatedFields: String[];
  previousValues: DataPreviousValues;
}

export interface DataSubscriptionPayloadPromise
  extends Promise<DataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DataPreviousValuesPromise>() => T;
}

export interface DataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DataPreviousValuesSubscription>() => T;
}

export interface Data {
  id: ID_Output;
  name?: String;
  parent?: String;
  description?: String;
  shape?: Shape;
  source?: String;
  target?: String;
  label?: String;
}

export interface DataPromise extends Promise<Data>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  parent: () => Promise<String>;
  description: () => Promise<String>;
  shape: () => Promise<Shape>;
  source: () => Promise<String>;
  target: () => Promise<String>;
  label: () => Promise<String>;
}

export interface DataSubscription
  extends Promise<AsyncIterator<Data>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  parent: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  shape: () => Promise<AsyncIterator<Shape>>;
  source: () => Promise<AsyncIterator<String>>;
  target: () => Promise<AsyncIterator<String>>;
  label: () => Promise<AsyncIterator<String>>;
}

export interface DataNullablePromise
  extends Promise<Data | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  parent: () => Promise<String>;
  description: () => Promise<String>;
  shape: () => Promise<Shape>;
  source: () => Promise<String>;
  target: () => Promise<String>;
  label: () => Promise<String>;
}

export interface AggregateData {
  count: Int;
}

export interface AggregateDataPromise
  extends Promise<AggregateData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDataSubscription
  extends Promise<AsyncIterator<AggregateData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DataConnection {
  pageInfo: PageInfo;
  edges: DataEdge[];
}

export interface DataConnectionPromise
  extends Promise<DataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DataEdge>>() => T;
  aggregate: <T = AggregateDataPromise>() => T;
}

export interface DataConnectionSubscription
  extends Promise<AsyncIterator<DataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DataEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDataSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Data",
    embedded: false
  },
  {
    name: "Shape",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
