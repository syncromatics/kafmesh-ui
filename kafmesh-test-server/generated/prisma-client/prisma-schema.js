module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateData {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Data {
  id: ID!
  name: String
  parent: String
  description: String
  shape: Shape
  source: String
  target: String
  label: String
}

type DataConnection {
  pageInfo: PageInfo!
  edges: [DataEdge]!
  aggregate: AggregateData!
}

input DataCreateInput {
  id: ID
  name: String
  parent: String
  description: String
  shape: Shape
  source: String
  target: String
  label: String
}

type DataEdge {
  node: Data!
  cursor: String!
}

enum DataOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  parent_ASC
  parent_DESC
  description_ASC
  description_DESC
  shape_ASC
  shape_DESC
  source_ASC
  source_DESC
  target_ASC
  target_DESC
  label_ASC
  label_DESC
}

type DataPreviousValues {
  id: ID!
  name: String
  parent: String
  description: String
  shape: Shape
  source: String
  target: String
  label: String
}

type DataSubscriptionPayload {
  mutation: MutationType!
  node: Data
  updatedFields: [String!]
  previousValues: DataPreviousValues
}

input DataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DataWhereInput
  AND: [DataSubscriptionWhereInput!]
  OR: [DataSubscriptionWhereInput!]
  NOT: [DataSubscriptionWhereInput!]
}

input DataUpdateInput {
  name: String
  parent: String
  description: String
  shape: Shape
  source: String
  target: String
  label: String
}

input DataUpdateManyMutationInput {
  name: String
  parent: String
  description: String
  shape: Shape
  source: String
  target: String
  label: String
}

input DataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  parent: String
  parent_not: String
  parent_in: [String!]
  parent_not_in: [String!]
  parent_lt: String
  parent_lte: String
  parent_gt: String
  parent_gte: String
  parent_contains: String
  parent_not_contains: String
  parent_starts_with: String
  parent_not_starts_with: String
  parent_ends_with: String
  parent_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  shape: Shape
  shape_not: Shape
  shape_in: [Shape!]
  shape_not_in: [Shape!]
  source: String
  source_not: String
  source_in: [String!]
  source_not_in: [String!]
  source_lt: String
  source_lte: String
  source_gt: String
  source_gte: String
  source_contains: String
  source_not_contains: String
  source_starts_with: String
  source_not_starts_with: String
  source_ends_with: String
  source_not_ends_with: String
  target: String
  target_not: String
  target_in: [String!]
  target_not_in: [String!]
  target_lt: String
  target_lte: String
  target_gt: String
  target_gte: String
  target_contains: String
  target_not_contains: String
  target_starts_with: String
  target_not_starts_with: String
  target_ends_with: String
  target_not_ends_with: String
  label: String
  label_not: String
  label_in: [String!]
  label_not_in: [String!]
  label_lt: String
  label_lte: String
  label_gt: String
  label_gte: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  AND: [DataWhereInput!]
  OR: [DataWhereInput!]
  NOT: [DataWhereInput!]
}

input DataWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createData(data: DataCreateInput!): Data!
  updateData(data: DataUpdateInput!, where: DataWhereUniqueInput!): Data
  updateManyDatas(data: DataUpdateManyMutationInput!, where: DataWhereInput): BatchPayload!
  upsertData(where: DataWhereUniqueInput!, create: DataCreateInput!, update: DataUpdateInput!): Data!
  deleteData(where: DataWhereUniqueInput!): Data
  deleteManyDatas(where: DataWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  data(where: DataWhereUniqueInput!): Data
  datas(where: DataWhereInput, orderBy: DataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Data]!
  datasConnection(where: DataWhereInput, orderBy: DataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DataConnection!
  node(id: ID!): Node
}

enum Shape {
  TRIANGLE
  ELLIPSES
  RECTANGLE
}

type Subscription {
  data(where: DataSubscriptionWhereInput): DataSubscriptionPayload
}
`
      }
    